events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=orders:10m rate=5r/s;

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # Upstream definitions
    upstream shop_flow {
        server app:3000;
    }

    upstream sfc_order_frontend {
        server sfc-order-frontend:3000;
    }

    upstream sfc_order_backend {
        server sfc-order-backend:3001;
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name app.soulfoodcafe.es;
        return 301 https://$server_name$request_uri;
    }

    # Main HTTPS server
    server {
        listen 443 ssl http2;
        server_name app.soulfoodcafe.es;

        # SSL certificates
        ssl_certificate /etc/nginx/ssl/app.soulfoodcafe.es.crt;
        ssl_certificate_key /etc/nginx/ssl/app.soulfoodcafe.es.key;

        # Basic Authentication for Shop Flow (existing)
        auth_basic "Restricted Area";
        auth_basic_user_file /etc/nginx/.htpasswd;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # SFC Order Application (new) - /orders path
        location /orders {
            # Remove auth for public order system
            auth_basic off;
            
            # Rate limiting for order system
            limit_req zone=orders burst=20 nodelay;
            
            # Proxy to SFC Order frontend
            proxy_pass http://sfc_order_frontend/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Handle static assets
            proxy_set_header X-Original-URI $request_uri;
            proxy_redirect off;
        }

        # SFC Order API - /orders/api path
        location /orders/api/ {
            # Remove auth for public API
            auth_basic off;
            
            # Rate limiting for API
            limit_req zone=api burst=30 nodelay;
            
            # Remove /orders prefix for backend
            rewrite ^/orders/api/(.*) /api/$1 break;
            
            # Proxy to SFC Order backend
            proxy_pass http://sfc_order_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # CORS headers for API
            add_header Access-Control-Allow-Origin "https://app.soulfoodcafe.es" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "https://app.soulfoodcafe.es";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
                add_header Access-Control-Max-Age 86400;
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
        }

        # Shop Flow Application (existing) - root and all other paths
        location / {
            # Keep existing auth for Shop Flow
            # auth_basic already set at server level
            
            proxy_pass http://shop_flow;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # Health check endpoints (no auth required)
        location /health {
            auth_basic off;
            proxy_pass http://shop_flow/health;
            access_log off;
        }

        location /orders/health {
            auth_basic off;
            proxy_pass http://sfc_order_frontend/health;
            access_log off;
        }

        location /orders/api/health {
            auth_basic off;
            rewrite ^/orders/api/health$ /health break;
            proxy_pass http://sfc_order_backend;
            access_log off;
        }
    }
}